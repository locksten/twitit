/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v3.5.1), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 101 }

  /* === schema: public === */

  /* --- enums --- */


  /* --- tables --- */

  export namespace Follow {
    export type Table = 'Follow';
    export interface Selectable {
      /**
      * **Follow.followerId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      followerId: number;
      /**
      * **Follow.followeeId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      followeeId: number;
      /**
      * **Follow.createdAt**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdAt: Date | null;
    }
    export interface JSONSelectable {
      /**
      * **Follow.followerId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      followerId: number;
      /**
      * **Follow.followeeId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      followeeId: number;
      /**
      * **Follow.createdAt**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdAt: db.DateString | null;
    }
    export interface Whereable {
      /**
      * **Follow.followerId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      followerId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Follow.followeeId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      followeeId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Follow.createdAt**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdAt?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **Follow.followerId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      followerId: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Follow.followeeId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      followeeId: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Follow.createdAt**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdAt?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **Follow.followerId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      followerId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Follow.followeeId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      followeeId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Follow.createdAt**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdAt?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'Follow_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace Hashtag {
    export type Table = 'Hashtag';
    export interface Selectable {
      /**
      * **Hashtag.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Hashtag_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **Hashtag.text**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      text: string;
    }
    export interface JSONSelectable {
      /**
      * **Hashtag.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Hashtag_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **Hashtag.text**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      text: string;
    }
    export interface Whereable {
      /**
      * **Hashtag.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Hashtag_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Hashtag.text**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      text?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **Hashtag.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Hashtag_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **Hashtag.text**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      text: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **Hashtag.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Hashtag_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **Hashtag.text**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      text?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'Hashtag_pkey' | 'Hashtag_text_key';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace Like {
    export type Table = 'Like';
    export interface Selectable {
      /**
      * **Like.twitId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      twitId: number;
      /**
      * **Like.userId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      userId: number;
    }
    export interface JSONSelectable {
      /**
      * **Like.twitId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      twitId: number;
      /**
      * **Like.userId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      userId: number;
    }
    export interface Whereable {
      /**
      * **Like.twitId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      twitId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Like.userId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      userId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **Like.twitId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      twitId: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Like.userId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      userId: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **Like.twitId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      twitId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Like.userId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      userId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'Like_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace Twit {
    export type Table = 'Twit';
    export interface Selectable {
      /**
      * **Twit.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Twit_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **Twit.text**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      text: string;
      /**
      * **Twit.createdAt**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdAt: Date | null;
      /**
      * **Twit.authorId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      authorId: number;
    }
    export interface JSONSelectable {
      /**
      * **Twit.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Twit_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **Twit.text**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      text: string;
      /**
      * **Twit.createdAt**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdAt: db.DateString | null;
      /**
      * **Twit.authorId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      authorId: number;
    }
    export interface Whereable {
      /**
      * **Twit.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Twit_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Twit.text**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      text?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Twit.createdAt**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdAt?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Twit.authorId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      authorId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **Twit.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Twit_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **Twit.text**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      text: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **Twit.createdAt**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdAt?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **Twit.authorId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      authorId: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **Twit.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Twit_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **Twit.text**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      text?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **Twit.createdAt**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdAt?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **Twit.authorId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      authorId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'Twit_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace Twit_Hashtag {
    export type Table = 'Twit_Hashtag';
    export interface Selectable {
      /**
      * **Twit_Hashtag.twitId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      twitId: number;
      /**
      * **Twit_Hashtag.hashtagId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      hashtagId: number;
    }
    export interface JSONSelectable {
      /**
      * **Twit_Hashtag.twitId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      twitId: number;
      /**
      * **Twit_Hashtag.hashtagId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      hashtagId: number;
    }
    export interface Whereable {
      /**
      * **Twit_Hashtag.twitId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      twitId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Twit_Hashtag.hashtagId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      hashtagId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **Twit_Hashtag.twitId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      twitId: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Twit_Hashtag.hashtagId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      hashtagId: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **Twit_Hashtag.twitId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      twitId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Twit_Hashtag.hashtagId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      hashtagId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'Twit_Hashtag_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace User {
    export type Table = 'User';
    export interface Selectable {
      /**
      * **User.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"User_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **User.username**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      username: string;
      /**
      * **User.password**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      password: string;
      /**
      * **User.createdAt**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdAt: Date | null;
    }
    export interface JSONSelectable {
      /**
      * **User.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"User_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **User.username**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      username: string;
      /**
      * **User.password**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      password: string;
      /**
      * **User.createdAt**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdAt: db.DateString | null;
    }
    export interface Whereable {
      /**
      * **User.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"User_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **User.username**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      username?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **User.password**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      password?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **User.createdAt**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdAt?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **User.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"User_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **User.username**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      username: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **User.password**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      password: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **User.createdAt**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdAt?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **User.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"User_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **User.username**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      username?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **User.password**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      password?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **User.createdAt**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdAt?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'User_pkey' | 'User_username_key';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* === cross-table types === */

  export type Table = Follow.Table | Hashtag.Table | Like.Table | Twit.Table | Twit_Hashtag.Table | User.Table;
  export type Selectable = Follow.Selectable | Hashtag.Selectable | Like.Selectable | Twit.Selectable | Twit_Hashtag.Selectable | User.Selectable;
  export type JSONSelectable = Follow.JSONSelectable | Hashtag.JSONSelectable | Like.JSONSelectable | Twit.JSONSelectable | Twit_Hashtag.JSONSelectable | User.JSONSelectable;
  export type Whereable = Follow.Whereable | Hashtag.Whereable | Like.Whereable | Twit.Whereable | Twit_Hashtag.Whereable | User.Whereable;
  export type Insertable = Follow.Insertable | Hashtag.Insertable | Like.Insertable | Twit.Insertable | Twit_Hashtag.Insertable | User.Insertable;
  export type Updatable = Follow.Updatable | Hashtag.Updatable | Like.Updatable | Twit.Updatable | Twit_Hashtag.Updatable | User.Updatable;
  export type UniqueIndex = Follow.UniqueIndex | Hashtag.UniqueIndex | Like.UniqueIndex | Twit.UniqueIndex | Twit_Hashtag.UniqueIndex | User.UniqueIndex;
  export type Column = Follow.Column | Hashtag.Column | Like.Column | Twit.Column | Twit_Hashtag.Column | User.Column;
  export type AllTables = [Follow.Table, Hashtag.Table, Like.Table, Twit.Table, Twit_Hashtag.Table, User.Table];
  export type AllMaterializedViews = [];


  export type SelectableForTable<T extends Table> = {
    Follow: Follow.Selectable;
    Hashtag: Hashtag.Selectable;
    Like: Like.Selectable;
    Twit: Twit.Selectable;
    Twit_Hashtag: Twit_Hashtag.Selectable;
    User: User.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    Follow: Follow.JSONSelectable;
    Hashtag: Hashtag.JSONSelectable;
    Like: Like.JSONSelectable;
    Twit: Twit.JSONSelectable;
    Twit_Hashtag: Twit_Hashtag.JSONSelectable;
    User: User.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    Follow: Follow.Whereable;
    Hashtag: Hashtag.Whereable;
    Like: Like.Whereable;
    Twit: Twit.Whereable;
    Twit_Hashtag: Twit_Hashtag.Whereable;
    User: User.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    Follow: Follow.Insertable;
    Hashtag: Hashtag.Insertable;
    Like: Like.Insertable;
    Twit: Twit.Insertable;
    Twit_Hashtag: Twit_Hashtag.Insertable;
    User: User.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    Follow: Follow.Updatable;
    Hashtag: Hashtag.Updatable;
    Like: Like.Updatable;
    Twit: Twit.Updatable;
    Twit_Hashtag: Twit_Hashtag.Updatable;
    User: User.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    Follow: Follow.UniqueIndex;
    Hashtag: Hashtag.UniqueIndex;
    Like: Like.UniqueIndex;
    Twit: Twit.UniqueIndex;
    Twit_Hashtag: Twit_Hashtag.UniqueIndex;
    User: User.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    Follow: Follow.Column;
    Hashtag: Hashtag.Column;
    Like: Like.Column;
    Twit: Twit.Column;
    Twit_Hashtag: Twit_Hashtag.Column;
    User: User.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    Follow: Follow.SQL;
    Hashtag: Hashtag.SQL;
    Like: Like.SQL;
    Twit: Twit.SQL;
    Twit_Hashtag: Twit_Hashtag.SQL;
    User: User.SQL;
  }[T];

}
